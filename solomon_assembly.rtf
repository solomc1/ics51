{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf460
{\fonttbl\f0\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;\red0\green128\blue0;\red0\green0\blue255;\red163\green21\blue21;
\red128\green128\blue128;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs30 \cf2 //\cf0 \
\cf2 //	ICS 51, Lab #2\cf0 \
\cf2 //\cf0 \
\cf2 //	-----------------------------------------------------------------\cf0 \
\cf2 // \cf0 \
\cf2 //	IMPORTATNT NOTES:\cf0 \
\cf2 //	\cf0 \
\cf2 //	- To test your code use the tests in lab2-testing.cpp\cf0 \
\cf2 //	\cf0 \
\cf2 //	- Write your assembly code only in the marked blocks.\cf0 \
\cf2 //	\cf0 \
\cf2 //	- Do NOT change anything outside the marked blocks.\cf0 \
\cf2 //\cf0 \
\cf2 //	- Remember to fill in your name, student ID below.\cf0 \
\cf2 // \cf0 \
\cf2 //	- This lab has to be done individually.\cf0 \
\cf2 //\cf0 \
\cf2 //  - Use lodepng.h and lodepng.cpp to read/write png files.\cf0 \
\cf2 //\cf0 \
\cf2 //  - Two test images are provided to you.\cf0 \
\cf2 //	\cf0 \
\cf2 //	- Submit ONLY lab2.cpp file for grading.\cf0 \
\cf2 // \cf0 \
\
\
\cf3 char\cf0  *yourName = \cf4 "Solomon Chan"\cf0 ;\
\cf3 char\cf0  *yourStudentID = \cf4 "40786337"\cf0 ;\
\
\
\cf2 //\cf0 \
\cf2 // This function should takes in a square sized grayscale image and applies thresholding on each pixel.\cf0 \
\cf2 // Width and height of the image are equal to dim.\cf0 \
\cf2 // NOTE: you can't define additional variables.\cf0 \
\cf2 //\cf0 \
\cf3 void\cf0  imageThresholding(\cf3 unsigned\cf0  \cf3 char\cf0 * \cf5 image\cf0 , \cf3 int\cf0  \cf5 dim\cf0 ) \{\
	\
	\cf3 __asm\cf0  \{\
    \
\cf2 // YOUR CODE STARTS HERE\cf0 \
		mov eax, image\
		mov edi, 0\
\
		ForRowLoop:\
			cmp dim, edi\
			jle finish\
			mov esi, 0\
\
		ForColLoop:\
			mov ebx, 0 \
			mov edx, 0 \
			cmp dim, esi\
			jle exitColLoop\
			\
		mulForLoop:\
			cmp dim, edx\
			jle exitMulLoop\
			add ebx, edi\
			add edx, 1\
			jmp mulForLoop\
\
		exitMulLoop:\
			\
				xor edx, edx\
				add ebx, esi\
\
				mov dl, [eax + ebx] \
				mov cl, 0x80\
				\
				and cl, dl\
				cmp cl, 0x00\
				jne greaterThan\
\
				xor edx, edx \
				jmp run\
\
				greaterThan:\
					or edx, 0xFFFFFFFF\
\
				run:\
					mov [eax + ebx], dl\
					add esi, 1\
					jmp forColLoop\
\
		exitColLoop:\
			add edi, 1\
			jmp ForRowLoop\
\
		finish: \
			mov image, eax\
\
\cf2 // YOUR CODE ENDS HERE\cf0 \
  \}\
\}\
\
\cf2 // This function flips an square iamge of given dimension horizontally/vertically.\cf0 \
\cf2 // Width and height of the image are equal to dim.\cf0 \
\cf2 // if direction is 0, image should be flipped horizontally\cf0 \
\cf2 // otherwise image should be flipped vertically.\cf0 \
\cf2 //\cf0 \
\cf2 //\cf0 \
\cf2 // Two variables are definde to help you with implemetanion.\cf0 \
\cf2 // NOTE: you can't define additional variables.\cf0 \
\cf2 //\cf0 \
\cf3 void\cf0  imageFlip(\cf3 unsigned\cf0  \cf3 int\cf0 * \cf5 image\cf0 , \cf3 int\cf0  \cf5 dim\cf0 , \cf3 int\cf0  \cf5 direction\cf0 ) \{\
  \
  \cf3 unsigned\cf0  \cf3 int\cf0  a_p, a_p_m;\
  \
  \cf3 __asm\cf0  \{\
    \
\cf2 // YOUR CODE STARTS HERE\cf0 \
	  \cf2 //Load Variables\cf0 \
		mov eax, 0 \cf2 //row\cf0 \
		mov ebx, 0 \cf2 // col\cf0 \
		mov ecx, image \cf2 //image \cf0 \
		mov edx, 0 \cf2 //empty\cf0 \
		mov esi, 0\
		mov edi, 0\
\
		\cf2 //Begin Loops\cf0 \
		rowForLoop:\cf2 //From n -> dim - n - 1 \cf0 \
			mov esi, dim										\cf2 //esi = dimension\cf0 \
			\cf2 //sub edx, ebx										//ebx = 0\cf0 \
			dec esi\
			cmp eax, esi\
			jae exitRowLoop\
\
			colForLoop: \cf2 //From 0 -> (dim / 2) + 1	ecx = image\cf0 \
				mov esi, dim \cf2 //dim / 2 + 1					edx = dimension\cf0 \
				shr esi, 1\
				\cf2 //inc edx\cf0 \
				cmp edx, esi\
				jae exitColLoop\
				\cf2 //mov edi, ebx										//edi = ebx\cf0 \
\
		\cf2 //Find Addresses for a_p\cf0 \
		\cf2 // a_p = image + (row * dim + col) * 4\cf0 \
				\cf2 // eax- row, ebx- col, ecx-image, edx- empty\cf0 \
			\cf2 //mov eax, esi// eax-row\cf0 \
			mov edx, 0 \cf2 //edx-dim\cf0 \
			mov a_p, 0\
\
				ap_loop:\
					cmp edx, dim\
					jae end_ap_loop\
					add a_p, esi \
					inc edx\
					jmp ap_loop\
\
				end_ap_loop:\
					add eax, edi\
					shl eax, 2\
					add eax, ecx\
					mov a_p, eax\
		\cf2 // Find Address for a_p_m\cf0 \
		\cf2 //row_m = row  \cf0 \
        \cf2 //col_m = (dim - col -1)\cf0 \
        \cf2 //a_p_m = image + (row_m * dim + col_m) * 4\cf0 \
\
			mov eax, esi\
			mov edx, dim\
			mul edx\
\
			add eax, edi\
			shl eax, 2\
			add eax, ecx\
			mov a_p, eax\
\
			mov edx, eax										\
			mov esi, dim\
			mul esi \cf2 //row *dim, row = dimension?\cf0 \
			sub esi, eax\
			dec esi\
			add edx, esi \cf2 // edi = col\cf0 \
			shl edx, 2 \cf2 // *4\cf0 \
			add edx, ecx \cf2 // image + answer\cf0 \
			mov a_p_m, edx \cf2 // \cf0 \
\
		\
		\cf2 //Swap pixels\cf0 \
		\cf2 // temp = Mem[a_p]\cf0 \
        \cf2 //Mem[a_p] = Mem[a_p_m]\cf0 \
        \cf2 //Mem[a_p_m]= temp\cf0 \
		\
			mov edx, a_p\
			mov edx, [edx] \
\
			mov eax, a_p_m \
			mov eax, [eax]\
\
			mov ebx, a_p_m \
			mov [ebx], edx \
\
			mov ebx, a_p\
			mov [ebx], eax \cf2 //[apm] = temp\cf0 \
				\
			\cf2 //mov ecx, image\cf0 \
			\
			\cf2 //inc edi\cf0 \
			jmp colForLoop\
\
		exitColLoop:\
			inc eax\
			inc ebx\
			jmp colForLoop\
\
		exitRowLoop:\
			mov image, ecx\
\cf2 // YOUR CODE ENDS HERE\cf0 \
  \
  \}\
  \
\}\
}